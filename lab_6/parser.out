Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression HASH expression
Rule 2     expression -> expression PERCENT expression
Rule 3     expression -> NUMBER

Terminals, with rules where they appear

HASH                 : 1
NUMBER               : 3
PERCENT              : 2
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression HASH expression
    (2) expression -> . expression PERCENT expression
    (3) expression -> . NUMBER

    NUMBER          shift and go to state 2

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . HASH expression
    (2) expression -> expression . PERCENT expression

    HASH            shift and go to state 3
    PERCENT         shift and go to state 4


state 2

    (3) expression -> NUMBER .

    HASH            reduce using rule 3 (expression -> NUMBER .)
    PERCENT         reduce using rule 3 (expression -> NUMBER .)
    $end            reduce using rule 3 (expression -> NUMBER .)


state 3

    (1) expression -> expression HASH . expression
    (1) expression -> . expression HASH expression
    (2) expression -> . expression PERCENT expression
    (3) expression -> . NUMBER

    NUMBER          shift and go to state 2

    expression                     shift and go to state 5

state 4

    (2) expression -> expression PERCENT . expression
    (1) expression -> . expression HASH expression
    (2) expression -> . expression PERCENT expression
    (3) expression -> . NUMBER

    NUMBER          shift and go to state 2

    expression                     shift and go to state 6

state 5

    (1) expression -> expression HASH expression .
    (1) expression -> expression . HASH expression
    (2) expression -> expression . PERCENT expression

    HASH            reduce using rule 1 (expression -> expression HASH expression .)
    PERCENT         reduce using rule 1 (expression -> expression HASH expression .)
    $end            reduce using rule 1 (expression -> expression HASH expression .)

  ! HASH            [ shift and go to state 3 ]
  ! PERCENT         [ shift and go to state 4 ]


state 6

    (2) expression -> expression PERCENT expression .
    (1) expression -> expression . HASH expression
    (2) expression -> expression . PERCENT expression

    PERCENT         reduce using rule 2 (expression -> expression PERCENT expression .)
    $end            reduce using rule 2 (expression -> expression PERCENT expression .)
    HASH            shift and go to state 3

  ! HASH            [ reduce using rule 2 (expression -> expression PERCENT expression .) ]
  ! PERCENT         [ shift and go to state 4 ]

